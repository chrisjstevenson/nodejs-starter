{
  "_args": [
    [
      "tc",
      "/Users/a1021420/Dropbox/Projects/node/nodejs-starter"
    ]
  ],
  "_from": "tc@*",
  "_id": "tc@0.5.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/tc",
  "_npmUser": {
    "email": "gregof@yandex.ru",
    "name": "gregof"
  },
  "_npmVersion": "1.1.59",
  "_phantomChildren": {},
  "_requested": {
    "name": "tc",
    "raw": "tc",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tc/-/tc-0.5.1.tgz",
  "_shasum": "06e2d2703891ad0c6a1feb33867b6e706248444c",
  "_shrinkwrap": null,
  "_spec": "tc",
  "_where": "/Users/a1021420/Dropbox/Projects/node/nodejs-starter",
  "author": {
    "email": "gregof@yandex.ru",
    "name": "Golubev Fedor",
    "url": "http://github.com/gregof"
  },
  "bin": {
    "tc": "./bin/tc"
  },
  "bugs": {
    "url": "https://github.com/gregof/tc/issues"
  },
  "dependencies": {},
  "description": "Simple test case runner",
  "devDependencies": {
    "abc": "0.5.x"
  },
  "directories": {},
  "dist": {
    "shasum": "06e2d2703891ad0c6a1feb33867b6e706248444c",
    "tarball": "https://registry.npmjs.org/tc/-/tc-0.5.1.tgz"
  },
  "engines": {
    "node": ">=0.4"
  },
  "homepage": "https://github.com/gregof/tc#readme",
  "main": "./lib/tc.js",
  "maintainers": [
    {
      "name": "gregof",
      "email": "gregof@yandex.ru"
    }
  ],
  "name": "tc",
  "optionalDependencies": {},
  "readme": "## tc\nTest case runner.\n\n### Test case files\nCreate the directory with testCases. Each file with testCase must contains '.case.' in the name. \n```\ncaseDir/\n  tc.conf.js //optional\n  A.case.js\n  B.case.js\n```\n\n### TestCase file structure\n```\n//in\ntest case text (js code by default)\n//out\nexpected result\n```\n\nFor example:\n```javascript\n//in\ntc.out(2 + 2);\ntc.out(2 * 2);\n//out\n4\n4\n```\nMethod 'tc.out' accumulates results. Each call creates the new line.\n\nYou can run testCases from command line:\n```\nnode tc/bin/tc caseDir\n```\nor from js:\n```javascript\nrequire('ts').run(caseDir);\n```\n\n### Config file - tc.conf.js\nConfig file should return the object with next fields:\n  * exec(inText, tc, callback) - function for testCase execution. \n    * 'inText' - text from testCase between '//in' and '//out'. \n    * 'tc' - testCase object. \n      * 'tc.out' - this method accumulates results. \n      * 'tc.fixPath' - can be used for resolving of relative path.\n    * 'callback' - must be called for finish of test.\n  * [beforeEach(tc, callback)] - function will be called before each testCase.\n    * 'tc' - testCase object. \n      * 'tc.out' - this method accumulates results. \n      * 'tc.fixPath' - can be used for resolving of relative path.\n    * 'callback' - callback.\n  * [afterEach(tc, callback)] - function will be called after each testCase.\n    * 'tc' - testCase object. \n      * 'tc.out' - this method accumulates results. \n      * 'tc.fixPath' - can be used for resolving of relative path.\n    * 'callback' - callback.\n\nFor example:\n```javascript\n{\n    exec: function (inText, tc, callback) {\n        tc.out('\\'' + inText + '\\'');\n        callback();\n    }\n}\n```\n'exec' can be the name of predefined executer. \n```javascript\n{\n    exec: 'async'\n}\n```\n'exec' can send Error object to callback.\n```javascript\n{\n    exec: function (inText, tc, callback) {\n        // do something\n        if (smfWrong) {\n            callback(new Error('Something wrong!'))\n        } else {\n            callback();\n        }\n    }\n}\n```\nYou can use code from another files. You should use 'conf.fixPath' for resolving of relative path.\n```javascript\n{\n    exec: require(conf.fixPath(./module.js)).exec\n}\n```\n\n### Example\nSee more examples in the test directory.\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/gregof/tc.git"
  },
  "version": "0.5.1"
}
